import sys
import json
import io
import os
import parselmouth
import numpy as np
import matplotlib
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT

# Configura√ß√£o do Matplotlib para ambiente de servidor
matplotlib.use('Agg')
import matplotlib.pyplot as plt

# --- FUN√á√ïES DE L√ìGICA E DESENHO (MANTIDAS/AJUSTADAS) ---

def generate_recommendations(data):
    """Gera dicas personalizadas e educativas com base nos dados e no tipo de exerc√≠cio."""
    recomendacoes = []
    summary = data.get("summary", {})
    exercise_type = data.get("exercise_type", "")
    
    # Adiciona alerta de sa√∫de vocal primeiro
    health_alert = summary.get("vocal_health_alert", "Normal")
    if health_alert != "Normal":
        recomendacoes.append(f"‚ö†Ô∏è <b>ALERTA DE SA√öDE:</b> Identificamos instabilidade ou ru√≠do excessivo na sua voz. Recomendamos descanso, hidrata√ß√£o e, se o problema persistir, procure um fonoaudi√≥logo. Detalhes: {health_alert}")

    if exercise_type in ["sustentacao_vogal", "resistencia_tmf", "palestrante_leitura"]:
        
        # 1. Qualidade Vocal (HNR) - Indicador de clareza e apoio
        hnr = summary.get("hnr_db_mean", 0)
        if hnr < 12.0:
            recomendacoes.append("‚Ä¢ <b>Clareza da Voz (HNR):</b> Sua voz est√° com **muito ar/sopro**. Isso reduz a proje√ß√£o. <b>Dica:</b> Pratique exerc√≠cios de apoio respirat√≥rio (diafragma) e tente fechar as cordas vocais de forma mais suave.")
        elif hnr < 18:
            recomendacoes.append("‚Ä¢ <b>Clareza da Voz (HNR):</b> O resultado √© bom, mas h√° espa√ßo para mais resson√¢ncia. <b>Dica:</b> Tente projetar o som para a 'm√°scara' (nariz e boca) para um timbre mais brilhante e 'limpo'.")
        else:
            recomendacoes.append("‚Ä¢ <b>Clareza da Voz (HNR):</b> **Excelente resultado!** Sua voz √© clara e bem apoiada. Continue mantendo este controle.")
        
        # 2. Afina√ß√£o/Estabilidade (Desvio Padr√£o em Semitons)
        stdev_semitones = summary.get("pitch_stdev_semitones", 10.0)
        if stdev_semitones > 0.5: # Valor alto indica pouca estabilidade/afina√ß√£o
            recomendacoes.append(f"‚Ä¢ <b>Estabilidade (Afina√ß√£o):</b> Sua nota principal est√° **inst√°vel** ({round(stdev_semitones, 2)} ST). <b>Dica:</b> Pratique notas longas e retas ('sustenta√ß√£o') para treinar a coordena√ß√£o da respira√ß√£o e dos m√∫sculos vocais.")
        elif stdev_semitones > 0.3:
            recomendacoes.append("‚Ä¢ <b>Estabilidade (Afina√ß√£o):</b> A estabilidade √© boa, mas pode ser mais precisa. <b>Dica:</b> Refine o controle respirat√≥rio e use exerc√≠cios de *solfejo* lento para 'fixar' a nota na mem√≥ria muscular.")
        
        # 3. Dura√ß√£o (TMF / Resist√™ncia)
        tmf = summary.get("duration_seconds", 0)
        if tmf > 0 and tmf < 15:
            recomendacoes.append(f"‚Ä¢ <b>Efici√™ncia Respirat√≥ria (TMF):</b> O tempo de sustenta√ß√£o ({round(tmf, 1)}s) √© baixo. <b>Dica:</b> Priorize exerc√≠cios de **respira√ß√£o diafragm√°tica** para aumentar a capacidade pulmonar e o controle do fluxo de ar.")
        
        # 4. Estabilidade de Micro-Varia√ß√£o (Jitter/Shimmer) - Indica fadiga
        jitter = summary.get("jitter_percent", "N/A")
        shimmer = summary.get("shimmer_percent", "N/A")

        if jitter == "N/A" or shimmer == "N/A":
             recomendacoes.append("‚Ä¢ <b>Micro-Estabilidade:</b> N√£o foi poss√≠vel calcular Jitter/Shimmer. <b>Dica:</b> Para uma an√°lise completa, grave em ambiente silencioso e com emiss√£o de voz 'limpa' (sem sopro excessivo).")
        elif isinstance(jitter, (int, float)) and jitter > 1.5:
             recomendacoes.append("‚Ä¢ <b>Micro-Estabilidade:</b> Jitter alto detectado. <b>Dica:</b> Isso pode indicar fadiga vocal ou falta de apoio. Descanse a voz e foque no apoio diafragm√°tico para maior firmeza.")
        
        # 5. Vibrato (Positivo, mas s√≥ se for relevante para o exerc√≠cio)
        vibrato_data = summary.get("vibrato", {})
        if vibrato_data.get("is_present") and vibrato_data.get("extent_semitones", 0) > 0.3:
             recomendacoes.append(f"‚Ä¢ <b>Vibrato Natural:</b> Sua voz apresentou um vibrato bonito e natural. Isso demonstra flexibilidade e relaxamento. Continue praticando para refinar essa oscila√ß√£o controlada.")


    if exercise_type == "analise_extensao":
        range_data = data.get("range_data", {})
        min_note = range_data.get("min_pitch_note", "N/A")
        max_note = range_data.get("max_pitch_note", "N/A")
        
        recomendacoes.append(f"‚Ä¢ <b>Seu Alcance:</b> Voc√™ explorou notas desde <b>{min_note}</b> at√© <b>{max_note}</b>. <b>Dica:</b> O aquecimento vocal √© essencial. Para expandir seu alcance, pratique exerc√≠cios de escalas que ultrapassem levemente suas notas mais agudas e graves de forma suave.")

    if not recomendacoes or recomendacoes[0].startswith("‚Ä¢ An√°lise conclu√≠da"):
        recomendacoes.append("‚Ä¢ An√°lise conclu√≠da com sucesso. Continue praticando para acompanhar sua evolu√ß√£o!")
            
    return recomendacoes

def draw_pitch_contour_chart(pitch_data, is_falada=False):
    """Cria um gr√°fico de contorno de afina√ß√£o com r√≥tulos amig√°veis."""
    times = [p[0] for p in pitch_data if p[1] is not None]
    frequencies = [p[1] for p in pitch_data if p[1] is not None]
    if not times or len(times) < 2: return None
    
    fig, ax = plt.subplots(figsize=(10, 3.5))
    ax.plot(times, frequencies, color='#2E86C1', linewidth=2)
    
    if is_falada:
        title = "Contorno da ENTRO√á√ÉO (Fala)"
        ylabel = "Frequ√™ncia (Entona√ß√£o)"
    else:
        title = "Contorno da AFINA√á√ÉO (Sustenta√ß√£o)"
        ylabel = "Frequ√™ncia (Hz)"
        
    ax.set_title(title, fontsize=12, fontweight='bold')
    ax.set_xlabel("Tempo (segundos)", fontsize=10)
    ax.set_ylabel(ylabel, fontsize=10)
    ax.grid(True, linestyle='--', alpha=0.6)
    
    if frequencies:
        ax.set_ylim(bottom=max(0, min(frequencies) - 20), top=max(frequencies) + 20)
    
    plt.tight_layout(pad=1.0)
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=200)
    buf.seek(0)
    plt.close(fig)
    return buf

# Fun√ß√µes draw_spectrogram, draw_vowel_space_chart e draw_vocal_range_chart 
# (assumidas como corretas e mantidas fora do snippet por brevidade, mas devem estar no seu arquivo final)

# --- SCRIPT PRINCIPAL DE GERA√á√ÉO DE PDF ---

# MODIFICA√á√ÉO AQUI: Ler o nome da pasta do cliente (email) como argumento
if len(sys.argv) < 2:
    print("Uso: python seu_script.py <nome_da_pasta_do_cliente_email>", file=sys.stderr)
    sys.exit(1)

client_folder_name = sys.argv[1]

# Constr√≥i os caminhos completos
base_dir = os.path.join("/tmp/cursoTutoLMS/py", client_folder_name)
json_file_path = os.path.join(base_dir, "data_for_report.json")
audio_file_path = os.path.join(base_dir, "audio-aluno.wav")
pdf_file = os.path.join(base_dir, "relatorio_vocal.pdf")


try:
    with open(json_file_path, 'r', encoding='utf-8') as f: data = json.load(f)
    sound = parselmouth.Sound(audio_file_path)
except Exception as e:
    print(f"Erro ao ler os arquivos: {e}", file=sys.stderr); sys.exit(1)

c = canvas.Canvas(pdf_file, pagesize=A4)
width, height = A4; margin = 50; available_width = width - (2 * margin)

# Fun√ß√£o de quebra de p√°gina (mantida, pois est√° correta)
def check_page_break(y_pos, needed_height):
    if y_pos - needed_height < margin:
        c.showPage()
        c.setFont("Helvetica", 11)
        return height - margin
    return y_pos

# Fun√ß√£o draw_paragraph (mantida, pois est√° correta)
def draw_paragraph(c, y_start, text_list, style, available_width):
    y_line = y_start
    for line in text_list:
        p = Paragraph(line, style)
        w, h = p.wrapOn(c, available_width, height)
        y_line -= h
        p.drawOn(c, margin, y_line)
        y_line -= 10
    return y_line

y = height - 70

# Cabe√ßalho
exercise_type = data.get('exercise_type', 'sustentacao_vogal')
title_map = {
    "sustentacao_vogal": "An√°lise de Estabilidade e Qualidade Vocal",
    "resistencia_tmf": "An√°lise de Resist√™ncia e Suporte Respirat√≥rio",
    "teste_vogais": "An√°lise da Clareza e Articula√ß√£o (Formantes)",
    "analise_extensao": "An√°lise do Seu Alcance Vocal",
    "palestrante_leitura": "An√°lise da Proje√ß√£o e Entona√ß√£o na Fala"
}
title = title_map.get(exercise_type, "Relat√≥rio de An√°lise Vocal")

c.setFillColor(colors.HexColor("#2E86C1")); c.setFont("Helvetica-Bold", 20)
c.drawCentredString(width/2, y, f"üé§ Relat√≥rio de Desempenho Vocal: {title} üé∂")
y -= 20; c.line(40, y, width-40, y); y -= 40
summary = data.get("summary", {})
classificacao = data.get('classificacao', 'Sugest√£o Indefinida')
styles = getSampleStyleSheet()

# --- 1. SE√á√ÉO RESUMO PRINCIPAL (Ajustada para ser educativa) ---
y = check_page_break(y, 150)
c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
c.drawString(margin, y, "Seu Perfil Vocal em N√∫meros F√°ceis"); y -= 15
style = ParagraphStyle(name='Resumo', fontName='Helvetica', fontSize=11, leading=18)

# Vari√°veis para a nova an√°lise
jitter_val = round(summary.get('jitter_percent', 0), 2) if isinstance(summary.get('jitter_percent', 0), (int, float)) else summary.get('jitter_percent', 'N/A')
shimmer_val = round(summary.get('shimmer_percent', 0), 2) if isinstance(summary.get('shimmer_percent', 0), (int, float)) else summary.get('shimmer_percent', 'N/A')
estabilidade_st = round(summary.get('pitch_stdev_semitones', 0), 2)
hnr_val = round(summary.get('hnr_db_mean', 0), 2)
duracao_val = round(summary.get('duration_seconds', 0), 2)
intensidade_val = round(summary.get('intensity_db_mean', 0), 2)

resumo_content = [
    f"<b>Afina√ß√£o M√©dia:</b> {summary.get('pitch_note_mean', 'N/A')} ({round(summary.get('pitch_hz_mean', 0), 2)} Hz).",
    f"<b>Estabilidade da Afina√ß√£o:</b> {estabilidade_st} semitons. <br/> <i>(Mede o 'balan√ßo' da nota. Menor que 0.5 ST √© considerado est√°vel.)</i>",
    f"<b>Clareza Vocal (HNR):</b> {hnr_val} dB. <br/> <i>(Indica o qu√£o 'limpa' a voz est√°. Valores acima de 18 dB s√£o excelentes.)</i>",
    f"<b>Proje√ß√£o/Volume M√©dio:</b> {intensidade_val} dB.",
    f"<b>Resist√™ncia (Dura√ß√£o):</b> {duracao_val} segundos. <br/> <i>(Seu Tempo M√°ximo de Fona√ß√£o. Essencial para controle respirat√≥rio.)</i>",
    f"<b>Instabilidade (Jitter/Shimmer):</b> Jitter: {jitter_val}%; Shimmer: {shimmer_val}%. <br/> <i>(Micro-varia√ß√µes. Valores baixos indicam sa√∫de e firmeza vocal.)</i>",
]

# Se vibrato for relevante, adiciona ao resumo
vibrato_data = summary.get("vibrato", {})
if vibrato_data.get("is_present"):
    vibrato_rate = round(vibrato_data["rate_hz"], 2)
    vibrato_extent = round(vibrato_data["extent_semitones"], 2)
    resumo_content.append(f"<b>Vibrato:</b> Presente (Taxa: {vibrato_rate} Hz, Extens√£o: {vibrato_extent} ST). <br/> <i>(Oscila√ß√£o natural. Indica flexibilidade e relaxamento vocal.)</i>")

y = draw_paragraph(c, y, resumo_content, style, available_width)
y -= 20

# --- 2. L√ìGICA POR TIPO DE EXERC√çCIO (Gr√°ficos) ---

# Sustenta√ß√£o de Vogal / TMF / Palestrante (Gr√°ficos de Contorno e Espectrograma)
if exercise_type in ["sustentacao_vogal", "resistencia_tmf", "palestrante_leitura"]:
    
    # Espectrograma
    y = check_page_break(y, 190)
    spectrogram_buffer = draw_spectrogram(sound)
    if spectrogram_buffer:
        c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#117A65")); c.drawString(margin, y, "Impress√£o Digital da Voz (Timbre e Proje√ß√£o)"); y -= 15
        img = ImageReader(spectrogram_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
        img_h = available_width * aspect
        c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
        y -= (img_h + 30)

    # Contorno de Pitch
    y = check_page_break(y, 170)
    pitch_contour_data = data.get("time_series", {}).get("pitch_contour", [])
    if pitch_contour_data:
        # Usa a flag is_falada para mudar o t√≠tulo do gr√°fico (Afina√ß√£o vs Entona√ß√£o)
        is_falada = (exercise_type == "palestrante_leitura")
        chart_buffer = draw_pitch_contour_chart(pitch_contour_data, is_falada=is_falada) 
        if chart_buffer:
            c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D")); c.drawString(margin, y, "Mapa da Afina√ß√£o/Entona√ß√£o"); y -= 15
            img = ImageReader(chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
            img_h = available_width * aspect
            c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
            y -= (img_h + 30)

elif exercise_type == "teste_vogais":
    # Espa√ßo Voc√°lico
    y = check_page_break(y, 40)
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
    c.drawString(margin, y, "Mapa do Seu Espa√ßo Voc√°lico (Clareza e Articula√ß√£o)"); y -= 15
    vowel_chart_buffer = draw_vowel_space_chart(data.get("vowel_space_data", {}))
    if vowel_chart_buffer:
        img_h = available_width * 0.95 
        y = check_page_break(y, img_h); c.drawImage(ImageReader(vowel_chart_buffer), margin, y - img_h, width=available_width, height=img_h, preserveAspectRatio=True, anchor='n')
        y -= (img_h + 15)
        
elif exercise_type == "analise_extensao":
    # Gr√°fico de Extens√£o
    y = check_page_break(y, 170)
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#117A65"))
    c.drawString(margin, y, "Seu Alcance Vocal Completo"); y -= 15
    range_data = data.get("range_data", {})
    
    vocal_range_chart_buffer = draw_vocal_range_chart(range_data)
    if vocal_range_chart_buffer:
        img = ImageReader(vocal_range_chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
        img_h = available_width * aspect
        y = check_page_break(y, img_h); c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
        y -= (img_h + 30)


# --- 3. SE√á√ÉO DE RECOMENDA√á√ïES (Ajustada para ser educativa) ---
recomendacoes = generate_recommendations(data)
if recomendacoes:
    style = ParagraphStyle(name='Recomendacoes', parent=styles['BodyText'], fontName='Helvetica', fontSize=11, leading=18)
    p_list = [Paragraph(line, style) for line in recomendacoes]
    total_h = sum([p.wrapOn(c, available_width, height)[1] for p in p_list]) + len(p_list)*10
    y = check_page_break(y, total_h + 40)
    
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#E67E22"))
    c.drawString(margin, y, "Recomenda√ß√µes Personalizadas e Dicas de Exerc√≠cios üí°"); y -= 15
    y = draw_paragraph(c, y, recomendacoes, style, available_width)

c.save()
print(pdf_file)
