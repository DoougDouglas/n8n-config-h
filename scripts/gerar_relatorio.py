from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import sys
import json
import io
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import parselmouth
import numpy as np

# --- FUN√á√ïES DE L√ìGICA E DESENHO ---
def generate_recommendations(data):
    recomendacoes = []
    summary = data.get("summary", {})
    hnr = summary.get("hnr_db", 0)
    if hnr < 18:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado indica uma voz com bastante soprosidade. Para um som mais 'limpo', foque em exerc√≠cios de apoio respirat√≥rio e fechamento suave das cordas vocais.")
    elif hnr < 22:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado √© bom, mas pode ser melhorado. Para aumentar a clareza e resson√¢ncia da sua voz, continue praticando um fluxo de ar constante e bem apoiado em suas notas.")
    else:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado est√° excelente, indicando uma voz clara, 'limpa' e com √≥timo apoio. Continue assim!")
    
    if data.get("exercise_type") == "resistencia_tmf" and summary.get("duration_seconds", 0) < 12:
        recomendacoes.append("‚Ä¢ <b>Efici√™ncia Respirat√≥ria (TMF):</b> Seu tempo de fona√ß√£o est√° abaixo do esperado. Pratique exerc√≠cios de sustenta√ß√£o de notas para melhorar seu controle do ar.")
        
    return recomendacoes

def draw_pitch_contour_chart(pitch_data):
    times = [p[0] for p in pitch_data if p[1] is not None]
    frequencies = [p[1] for p in pitch_data if p[1] is not None]
    if not times or len(times) < 2: return None
    plt.figure(figsize=(10, 3.5)); plt.plot(times, frequencies, color='#2E86C1', linewidth=2)
    plt.title("Contorno da Afina√ß√£o ao Longo do Tempo", fontsize=12); plt.xlabel("Tempo (segundos)", fontsize=10)
    plt.ylabel("Frequ√™ncia (Hz)", fontsize=10); plt.grid(True, linestyle='--', alpha=0.6)
    plt.ylim(bottom=max(0, min(frequencies) - 20), top=max(frequencies) + 20); plt.tight_layout()
    buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=200); buf.seek(0); plt.close()
    return buf

def draw_spectrogram(sound):
    try:
        spectrogram = sound.to_spectrogram(); plt.figure(figsize=(10, 3.5))
        sg_db = 10 * np.log10(spectrogram.values)
        plt.imshow(sg_db, cmap='viridis', aspect='auto', origin='lower', extent=[spectrogram.xmin, spectrogram.xmax, spectrogram.ymin, spectrogram.ymax])
        plt.title("Espectrograma (Impress√£o Digital da Voz)", fontsize=12); plt.xlabel("Tempo (segundos)", fontsize=10)
        plt.ylabel("Frequ√™ncia (Hz)", fontsize=10); plt.ylim(top=4000)
        buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=200); buf.seek(0); plt.close()
        return buf
    except Exception: return None

def draw_paragraph(c, y_start, text_list, style):
    """Desenha uma lista de par√°grafos e retorna a nova posi√ß√£o Y."""
    y_line = y_start
    for line in text_list:
        p = Paragraph(line, style)
        w, h = p.wrapOn(c, width - 100, height)
        y_line -= (h + 5)
        p.drawOn(c, margin, y_line)
    return y_line

# --- SCRIPT PRINCIPAL DE GERA√á√ÉO DE PDF ---
json_file_path = "/tmp/cursoTutoLMS/py/data_for_report.json"
audio_file_path = "/tmp/cursoTutoLMS/py/audio-aluno.wav" 
try:
    with open(json_file_path, 'r', encoding='utf-8') as f: data = json.load(f)
    sound = parselmouth.Sound(audio_file_path)
except Exception as e:
    print(f"Erro ao ler os arquivos: {e}", file=sys.stderr); sys.exit(1)

pdf_file = "/tmp/cursoTutoLMS/py/relatorio_vocal.pdf"
c = canvas.Canvas(pdf_file, pagesize=A4)
width, height = A4; margin = 50; available_width = width - (2 * margin)
y = height - 70

exercise_type = data.get('exercise_type', 'sustentacao_vogal')
summary = data.get("summary", {})
classificacao = data.get('classificacao', 'Indefinido')
styles = getSampleStyleSheet()

# Cabe√ßalho
c.setFillColor(colors.HexColor("#2E86C1")); c.setFont("Helvetica-Bold", 20)
c.drawCentredString(width/2, y, f"üé§ Relat√≥rio de Exerc√≠cio: {exercise_type.replace('_', ' ').title()} üé∂")
y -= 20; c.setStrokeColor(colors.HexColor("#2E86C1")); c.setLineWidth(1)
c.line(40, y, width-40, y); y -= 40

# --- L√ìGICA PARA MONTAR O PDF CORRETO ---
if exercise_type == "escala_5_notas":
    # --- LAYOUT PARA O RELAT√ìRIO DE ESCALA ---
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
    c.drawString(margin, y, "Resumo da An√°lise de Escala"); y -= 15
    style = ParagraphStyle(name='Resumo', fontName='Helvetica', fontSize=11, leading=18)
    resumo_content = [
        f"<b>Extens√£o Utilizada:</b> De <b>{summary.get('min_pitch_note', 'N/A')}</b> a <b>{summary.get('max_pitch_note', 'N/A')}</b>",
        f"<b>Afina√ß√£o M√©dia:</b> {round(summary.get('pitch_hz', 0), 2)} Hz",
        f"<b>Estabilidade M√©dia (Desvio Padr√£o):</b> {round(summary.get('stdev_pitch_hz', 0), 2)} Hz"
    ]
    y = draw_paragraph(c, y, resumo_content, style)
    y -= 20
    
    pitch_contour_data = data.get("time_series", {}).get("pitch_contour", [])
    if pitch_contour_data:
        chart_buffer = draw_pitch_contour_chart(pitch_contour_data)
        if chart_buffer:
            img = ImageReader(chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
            img_h = available_width * aspect
            c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
            y -= (img_h + 30)
else:
    # --- LAYOUT PADR√ÉO PARA SUSTENTA√á√ÉO DE VOGAL ---
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
    c.drawString(margin, y, "Resumo da An√°lise"); y -= 15
    style = ParagraphStyle(name='Resumo', fontName='Helvetica', fontSize=11, leading=18)
    resumo_content = [
        f"<b>Afina√ß√£o M√©dia:</b> {round(summary.get('pitch_hz', 0), 2)} Hz (Nota: {summary.get('pitch_note', 'N/A')})",
        f"<b>Estabilidade (Desvio Padr√£o):</b> {round(summary.get('stdev_pitch_hz', 0), 2)} Hz",
        f"<b>Intensidade M√©dia:</b> {round(summary.get('intensity_db', 0), 2)} dB",
        f"<b>Qualidade (HNR):</b> {round(summary.get('hnr_db', 0), 2)} dB",
        f"<b>Efici√™ncia Respirat√≥ria (TMF):</b> {round(summary.get('duration_seconds', 0), 2)} segundos",
        f"<b>Classifica√ß√£o Sugerida:</b> {classificacao}"
    ]
    y = draw_paragraph(c, y, resumo_content, style)
    y -= 20
    
    spectrogram_buffer = draw_spectrogram(sound)
    if spectrogram_buffer:
        img = ImageReader(spectrogram_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
        img_h = available_width * aspect
        c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
        y -= (img_h + 30)

    pitch_contour_data = data.get("time_series", {}).get("pitch_contour", [])
    if pitch_contour_data:
        chart_buffer = draw_pitch_contour_chart(pitch_contour_data)
        if chart_buffer:
            img = ImageReader(chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
            img_h = available_width * aspect
            c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
            y -= (img_h + 30)

# --- CORRE√á√ÉO AQUI ---
# Chamando a fun√ß√£o com o nome correto: 'draw_paragraph'
recomendacoes = generate_recommendations(data)
if recomendacoes:
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#E67E22"));
    c.drawString(50, y, "Recomenda√ß√µes e Dicas üí°"); y -= 15
    style = ParagraphStyle(name='Recomendacoes', fontName='Helvetica', fontSize=11, leading=15)
    y = draw_paragraph(c, y, recomendacoes, style)

c.save()
print(pdf_file)
