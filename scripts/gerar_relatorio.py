from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import sys
import json
import io
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import parselmouth
import numpy as np

# --- FUN√á√ïES DE L√ìGICA E DESENHO (sem altera√ß√µes) ---
def generate_recommendations(data):
    # ... (c√≥digo da fun√ß√£o) ...
def draw_pitch_contour_chart(pitch_data):
    # ... (c√≥digo da fun√ß√£o) ...
def draw_spectrogram(sound):
    # ... (c√≥digo da fun√ß√£o) ...

# --- SCRIPT PRINCIPAL DE GERA√á√ÉO DE PDF (COM L√ìGICA CONDICIONAL) ---

json_file_path = "/tmp/cursoTutoLMS/py/data_for_report.json"
audio_file_path = "/tmp/cursoTutoLMS/py/audio-aluno.wav" 
try:
    with open(json_file_path, 'r', encoding='utf-8') as f: data = json.load(f)
    sound = parselmouth.Sound(audio_file_path)
except Exception as e:
    print(f"Erro ao ler os arquivos: {e}", file=sys.stderr); sys.exit(1)

pdf_file = "/tmp/cursoTutoLMS/py/relatorio_vocal.pdf"
c = canvas.Canvas(pdf_file, pagesize=A4)
width, height = A4; margin = 50; available_width = width - (2 * margin)
y = height - 70

# --- IN√çCIO DA L√ìGICA CONDICIONAL ---
exercise_type = data.get('exercise_type', 'sustentacao_vogal')
summary = data.get("summary", {})
classificacao = data.get('classificacao', 'Indefinido')

# CABE√áALHO (comum a todos os relat√≥rios)
c.setFillColor(colors.HexColor("#2E8C1")); c.setFont("Helvetica-Bold", 20)
c.drawCentredString(width/2, y, f"üé§ Relat√≥rio de Exerc√≠cio: {exercise_type.replace('_', ' ').title()} üé∂")
y -= 20; c.setStrokeColor(colors.HexColor("#2E8C1")); c.setLineWidth(1)
c.line(40, y, width-40, y); y -= 40

# MONTA O PDF DE ACORDO COM O EXERC√çCIO
if exercise_type == "escala_5_notas":
    # --- LAYOUT PARA O RELAT√ìRIO DE ESCALA ---
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
    c.drawString(margin, y, "Resumo da An√°lise de Escala")
    y -= 15
    style = ParagraphStyle(name='Resumo', fontName='Helvetica', fontSize=11, leading=18)
    resumo_content = [
        f"<b>Extens√£o Utilizada:</b> De <b>{summary.get('min_pitch_note', 'N/A')}</b> a <b>{summary.get('max_pitch_note', 'N/A')}</b>",
        f"<b>Afina√ß√£o M√©dia:</b> {round(summary.get('pitch_hz', 0), 2)} Hz",
        f"<b>Estabilidade M√©dia (Desvio Padr√£o):</b> {round(summary.get('stdev_pitch_hz', 0), 2)} Hz"
    ]
    for line in resumo_content:
        p = Paragraph(line, style); w, h = p.wrapOn(c, available_width, height)
        y -= (h + 5); p.drawOn(c, margin, y)
    y -= 30
    
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#117A65"))
    c.drawString(margin, y, "Gr√°fico de Contorno da Afina√ß√£o")
    y -= 15
    pitch_contour_data = data.get("time_series", {}).get("pitch_contour", [])
    if pitch_contour_data:
        chart_buffer = draw_pitch_contour_chart(pitch_contour_data)
        if chart_buffer:
            img = ImageReader(chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
            img_h = available_width * aspect
            c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
            y -= (img_h + 15)
            
else: # PADR√ÉO: LAYOUT PARA SUSTENTA√á√ÉO DE VOGAL
    # --- LAYOUT COMPLETO QUE J√Å TEMOS ---
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
    c.drawString(margin, y, "Resumo da An√°lise"); y -= 15
    style = ParagraphStyle(name='Resumo', fontName='Helvetica', fontSize=11, leading=18)
    resumo_content = [
        f"<b>Afina√ß√£o M√©dia:</b> {round(summary.get('pitch_hz', 0), 2)} Hz (Nota: {summary.get('pitch_note', 'N/A')})",
        # ... (resto do resumo da an√°lise de sustenta√ß√£o) ...
    ]
    # ... (resto do c√≥digo para desenhar o relat√≥rio de sustenta√ß√£o) ...
    # (Gr√°fico de Espectrograma, Contorno, Recomenda√ß√µes, etc.)

c.save()
print(pdf_file)
