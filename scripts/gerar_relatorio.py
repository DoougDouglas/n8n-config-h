from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT
import sys
import json
import io

# Importa as bibliotecas de an√°lise e gr√°ficos
import parselmouth
import numpy as np
import matplotlib
matplotlib.use('Agg') # Modo n√£o-interativo
import matplotlib.pyplot as plt

# --- FUN√á√ïES DE L√ìGICA E DESENHO ---

def generate_recommendations(data):
    # (Fun√ß√£o de recomenda√ß√µes sem altera√ß√µes)
    recomendacoes = []
    summary = data.get("summary", {})
    hnr = summary.get("hnr_db", 0)
    if hnr < 18:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado indica uma voz com bastante soprosidade. Para um som mais 'limpo', foque em exerc√≠cios de apoio respirat√≥rio e fechamento suave das cordas vocais.")
    elif hnr < 22:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado √© bom, mas pode ser melhorado. Para aumentar a clareza e resson√¢ncia da sua voz, continue praticando um fluxo de ar constante e bem apoiado em suas notas.")
    else:
        recomendacoes.append("‚Ä¢ <b>Qualidade Vocal (HNR):</b> Seu resultado est√° excelente, indicando uma voz clara, 'limpa' e com √≥timo apoio. Continue assim!")
    return recomendacoes

def draw_pitch_contour_chart(pitch_data):
    # (Fun√ß√£o de gr√°fico sem altera√ß√µes)
    times = [p[0] for p in pitch_data if p[1] is not None]
    frequencies = [p[1] for p in pitch_data if p[1] is not None]
    if not times or len(times) < 2: return None
    plt.figure(figsize=(10, 3.5)); plt.plot(times, frequencies, color='#2E86C1', linewidth=2)
    plt.title("Contorno da Afina√ß√£o ao Longo do Tempo", fontsize=12); plt.xlabel("Tempo (segundos)", fontsize=10)
    plt.ylabel("Frequ√™ncia (Hz)", fontsize=10); plt.grid(True, linestyle='--', alpha=0.6)
    plt.ylim(bottom=max(0, min(frequencies) - 20), top=max(frequencies) + 20); plt.tight_layout()
    buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=200); buf.seek(0); plt.close()
    return buf

def draw_spectrogram(sound):
    # (Fun√ß√£o de espectrograma sem altera√ß√µes)
    try:
        spectrogram = sound.to_spectrogram(); plt.figure(figsize=(10, 3.5))
        sg_db = 10 * np.log10(spectrogram.values)
        plt.imshow(sg_db, cmap='viridis', aspect='auto', origin='lower', extent=[spectrogram.xmin, spectrogram.xmax, spectrogram.ymin, spectrogram.ymax])
        plt.title("Espectrograma (Impress√£o Digital da Voz)", fontsize=12); plt.xlabel("Tempo (segundos)", fontsize=10)
        plt.ylabel("Frequ√™ncia (Hz)", fontsize=10); plt.ylim(top=4000)
        buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=200); buf.seek(0); plt.close()
        return buf
    except Exception: return None

# --- SCRIPT PRINCIPAL DE GERA√á√ÉO DE PDF ---
json_file_path = "/tmp/cursoTutoLMS/py/data_for_report.json"
audio_file_path = "/tmp/cursoTutoLMS/py/audio-aluno.wav" 
try:
    with open(json_file_path, 'r', encoding='utf-8') as f: data = json.load(f)
    sound = parselmouth.Sound(audio_file_path)
except Exception as e:
    print(f"Erro ao ler os arquivos: {e}", file=sys.stderr); sys.exit(1)

pdf_file = "/tmp/cursoTutoLMS/py/relatorio_vocal.pdf"
c = canvas.Canvas(pdf_file, pagesize=A4)
width, height = A4; margin = 50; available_width = width - (2 * margin)

# --- P√ÅGINA 1: DADOS PRINCIPAIS E GR√ÅFICOS ---

y = height - 70 # Posi√ß√£o vertical inicial

# Cabe√ßalho
c.setFillColor(colors.HexColor("#2E86C1")); c.setFont("Helvetica-Bold", 20)
c.drawCentredString(width/2, y, "üé§ Relat√≥rio de Biofeedback Vocal üé∂"); y -= 20
c.setStrokeColor(colors.HexColor("#2E86C1")); c.setLineWidth(1)
c.line(40, y, width-40, y); y -= 40

# Resumo da An√°lise
summary = data.get("summary", {}); classificacao = data.get('classificacao', 'Indefinido')
c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
c.drawString(margin, y, "Resumo da An√°lise"); y -= 15
styles = getSampleStyleSheet()
style = ParagraphStyle(name='Resumo', parent=styles['BodyText'], fontName='Helvetica', fontSize=11, leading=18)
resumo_content = [
    f"<b>Afina√ß√£o M√©dia:</b> {round(summary.get('pitch_hz', 0), 2)} Hz (Nota: {summary.get('pitch_note', 'N/A')})",
    f"<b>Estabilidade (Desvio Padr√£o):</b> {round(summary.get('stdev_pitch_hz', 0), 2)} Hz",
    f"<b>Intensidade M√©dia:</b> {round(summary.get('intensity_db', 0), 2)} dB",
    f"<b>Qualidade (HNR):</b> {round(summary.get('hnr_db', 0), 2)} dB",
    f"<b>Efici√™ncia Respirat√≥ria (TMF):</b> {round(summary.get('duration_seconds', 0), 2)} segundos",
    f"<b>Classifica√ß√£o Sugerida:</b> {classificacao}"
]
for line in resumo_content:
    p = Paragraph(line, style); w, h = p.wrapOn(c, available_width, height)
    p.drawOn(c, margin, y - h); y -= (h + 5)
y -= 20

# Gr√°fico de Espectrograma e Explica√ß√£o
c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#117A65"))
c.drawString(margin, y, "An√°lise de Timbre e Proje√ß√£o"); y -= 15
spectrogram_buffer = draw_spectrogram(sound)
if spectrogram_buffer:
    img = ImageReader(spectrogram_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
    img_h = available_width * aspect
    c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
    y -= (img_h + 15)
    
    # --- TEXTO EXPLICATIVO DO ESPECTROGRAMA (REINSERIDO) ---
    explanation_style = ParagraphStyle(name='Explica√ß√£o', parent=styles['BodyText'], fontName='Helvetica-Oblique', fontSize=10, leading=12)
    explanation_text = """O <b>Espectrograma</b> acima √© a "impress√£o digital" da sua voz. Procure por faixas de energia horizontais: a mais baixa √© sua nota, e as de cima s√£o os harm√¥nicos que d√£o "cor" ao seu timbre. Cantores profissionais desenvolvem o <b>"Formante do Cantor"</b>, uma concentra√ß√£o de energia na faixa de 2500-3500 Hz (uma faixa amarela/brilhante), que d√° brilho e proje√ß√£o √† voz."""
    p = Paragraph(explanation_text, explanation_style); w, h = p.wrapOn(c, available_width, height)
    p.drawOn(c, margin, y - h); y -= (h + 25)

# Gr√°fico de Contorno de Afina√ß√£o
c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#1F618D"))
c.drawString(margin, y, "An√°lise de Afina√ß√£o e Estabilidade"); y -= 15
pitch_contour_data = data.get("time_series", {}).get("pitch_contour", [])
if pitch_contour_data:
    chart_buffer = draw_pitch_contour_chart(pitch_contour_data)
    if chart_buffer:
        img = ImageReader(chart_buffer); img_width, img_height = img.getSize(); aspect = img_height / float(img_width)
        img_h = available_width * aspect
        c.drawImage(img, margin, y - img_h, width=available_width, height=img_h)
        y -= (img_h + 15)
        
        # --- NOVA EXPLICA√á√ÉO DO GR√ÅFICO DE CONTORNO ---
        explanation_style.fontName = 'Helvetica-Oblique'
        explanation_text = """Este gr√°fico mostra sua afina√ß√£o segundo a segundo. Uma linha <b>mais reta</b> indica uma nota muito est√°vel. Ondula√ß√µes suaves e regulares podem indicar um <b>vibrato</b> controlado. Linhas muito irregulares sugerem instabilidade na sustenta√ß√£o."""
        p = Paragraph(explanation_text, explanation_style); w, h = p.wrapOn(c, available_width, height)
        p.drawOn(c, margin, y - h); y -= (h + 25)

c.showPage() # Finaliza a primeira p√°gina

# --- P√ÅGINA 2: RECOMENDA√á√ïES E GLOSS√ÅRIO ---
y = height - 70

# Recomenda√ß√µes
recomendacoes = generate_recommendations(data)
if recomendacoes:
    style = ParagraphStyle(name='Recomendacoes', parent=styles['BodyText'], fontName='Helvetica', fontSize=11, leading=15)
    c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.HexColor("#E67E22"))
    c.drawString(margin, y, "Recomenda√ß√µes e Dicas üí°"); y -= 15
    for text_line in recomendacoes:
        p = Paragraph(text_line, style); w, h = p.wrapOn(c, available_width, height)
        p.drawOn(c, margin, y - h); y -= (h + 10)
    y -= 25

# --- NOVO GLOSS√ÅRIO DE M√âTRICAS ---
c.setFont("Helvetica-Bold", 14); c.setFillColor(colors.darkslategray)
c.drawString(margin, y, "Gloss√°rio: Entendendo Suas M√©tricas"); y -= 15
style = ParagraphStyle(name='Glossario', parent=styles['BodyText'], fontName='Helvetica', fontSize=10, leading=14)
glossario_content = [
    "<b>Afina√ß√£o M√©dia (Hz):</b> A nota musical central que voc√™ cantou, medida em Hertz.",
    "<b>Estabilidade (Desvio Padr√£o):</b> Mede o quanto sua afina√ß√£o variou. Quanto menor o n√∫mero, mais est√°vel e firme foi sua nota.",
    "<b>Intensidade M√©dia (dB):</b> O volume m√©dio da sua voz. Ajuda a medir a proje√ß√£o e energia.",
    "<b>Qualidade (HNR):</b> 'Harmonics-to-Noise Ratio'. Mede a 'pureza' do som. Valores altos indicam uma voz 'limpa', com pouco ru√≠do ou soprosidade.",
    "<b>Efici√™ncia Respirat√≥ria (TMF):</b> 'Tempo M√°ximo de Fona√ß√£o'. Mede por quantos segundos voc√™ sustentou o som, indicando seu controle do fluxo de ar.",
    "<b>Formantes (F1, F2):</b> Picos de resson√¢ncia que definem o som das vogais. S√£o essenciais para a clareza da dic√ß√£o."
]
for line in glossario_content:
    p = Paragraph(line, style); w, h = p.wrapOn(c, available_width, height)
    p.drawOn(c, margin, y - h); y -= (h + 8)

c.save()
print(pdf_file)
